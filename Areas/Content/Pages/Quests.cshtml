@page
@model QuestsModel
@{
    ViewData["Title"] = "Quests";
}
<body>
    <h1>Quests</h1>
    <table>
        <thead><tr><th>Giver</th><th>Title</th><th>Objectives</th><th>Wiki</th></tr></thead>
        <tbody></tbody>
    </table>
</body>

<script>
    async function getQuests() {
        try {
            const response = await fetch("/Content/Quests?handler=Quests", {
                method: "GET",
                headers: { "Accept": "application/json" }
            });

            await handleResponce(response);
        }
        catch (error) {
            console.error(error.message);
        }
    }

    async function handleResponce(response) {
        if (response.ok === true) {
            const result = await response.json();

            if (result.success === false && result.redirectUrl) {
                window.location.href = result.redirectUrl;
            }
            else {
                const quests = result.quests;
                createTable(quests);
            }
        }
    }

    function createTable(quests) {
        const rows = document.querySelector("tbody");
        rows.innerHTML = '';
        const fragment = document.createDocumentFragment();
        quests.forEach(quest => fragment.append(createRow(quest)));
        rows.append(fragment);
    }

    function createRow(quest) {
        const tr = document.createElement("tr");
        tr.setAttribute("data-rowid", quest.id);

        tr.innerHTML = `
            <td>${quest.giver}</td>
            <td>${quest.title}</td>
            <td>${quest.objectives.map(createObjective).join('<br>')}</td>
            <td>${quest.wiki}</td>
        `;

        const doneLink = document.createElement("button");
        doneLink.className = "btn btn-outline-dark";
        doneLink.append("Done");
        doneLink.addEventListener("click", async () => await completeQuest(quest.id));
        tr.append(doneLink);

        return tr;
    }

    function createObjective(objective) {
        const typesMap = {
            warning: () => objective.target,
            reputation: () => `Reach level ${objective.number} loyalty with ${objective.target}`,
            skill: () => `Reach the required ${objective.number} ${objective.target} skill level`,
            collect: () => `Collect ${objective.number} ${objective.target}`,
            pickup: () => `Pick up ${objective.target}`,
            place: () => `Place ${objective.number > 1 ? `${objective.number} ` : ''}${objective.target}`,
            mark: () => `Mark ${objective.target} with ${objective.tool}`,
            find: () => `Find ${objective.number} ${objective.target} in raid`,
            locate: () => `Locate ${objective.target}`,
            build: () => `Build ${objective.target}`,
            kill: () => {
                let killString = `Kill ${objective.number} ${objective.target}`;

                if (objective.with && objective.with.length > 0) {
                    const substrings = ["usec", "between", "in", "while", "reshala", "inside", "on", "secure"];
                    killString += substrings.some(sub => objective.with[0].toLowerCase().startsWith(sub)) ? " " : " with ";
                    killString += `${objective.with.join(", ")}`;
                }

                return killString;
            }
        };

        let objectiveString = typesMap[objective.type]?.() || `${objective.type} ${objective.target}`;

        if (!["warning", "reputation", "skill", "build"].includes(objective.type) && objective.location)
            objectiveString += ` on ${objective.location === "any" ? "any location" : objective.location}`;

        return objectiveString;
    }

    async function completeQuest(questId) {
        try {
            const response = await fetch("/Content/Quests?handler=QuestDone", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.getElementById('antiForgeryToken').value
                },
                body: questId
            });

            await handleResponce(response);
        }
        catch (error) {
            console.error(error.message);
        }
    }

    getQuests();
</script>
